name: 'package version'
description: 'Find the closest valid version given the package name and version, and python version'
inputs:
  package-name:
    description: 'The package name'
    required: true
  package-version:
    description: 'The package version'
    required: true
  python-version:
    description: 'The python version'
    required: true
outputs:
  is-valid-version:
    description:
      'Boolean value that indicates if the input package version is valid (true)
      or not (false) for the given python version'
    value: ${{ steps.check-version.outputs.is-valid-version }}
  closed-valid-version:
    description:
      'The closed valid package version given the input package version'
    value: ${{ steps.find-version.outputs.closed-valid-version }}
#  random-number:
#    description: "Random number"
#    value: ${{ steps.random-number-generator.outputs.random-number }}
runs:
  using: "composite"
  steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ inputs.python-version }}

    - name: Install dependencies
      shell: bash
      run: |
        pip install feu==0.0.8a0

    - name: Check version
      id: check-version
      shell: bash
      run: |
        cmd="from feu.package import is_valid_version; res = is_valid_version(pkg_name='${PACKAGE_NAME}', pkg_version='${PACKAGE_VERSION}', python_version='${PYTHON_VERSION}'); print(f'is-valid-version={res}')"
        python -c "${cmd}" >> $GITHUB_OUTPUT
      env:
        PACKAGE_NAME: ${{ inputs.package-name }}
        PACKAGE_VERSION: ${{ inputs.package-version }}
        PYTHON_VERSION: ${{ inputs.python-version }}

    - name: Find closest valid version
      id: find-version
      shell: bash
      run: |
        cmd="from feu.package import find_closest_version; version = find_closest_version(pkg_name='${PACKAGE_NAME}', pkg_version='${PACKAGE_VERSION}', python_version='${PYTHON_VERSION}'); print(f'closed-valid-version={version}')"
        python -c "${cmd}" >> $GITHUB_OUTPUT
      env:
        PACKAGE_NAME: ${{ inputs.package-name }}
        PACKAGE_VERSION: ${{ inputs.package-version }}
        PYTHON_VERSION: ${{ inputs.python-version }}

#    - name: Set Greeting
#      run: echo "Hello $INPUT_WHO_TO_GREET."
#      shell: bash
#      env:
#        INPUT_WHO_TO_GREET: ${{ inputs.who-to-greet }}
#
#    - name: Random Number Generator
#      id: random-number-generator
#      run: echo "random-number=$(echo $RANDOM)" >> $GITHUB_OUTPUT
#      shell: bash
#
#    - name: Set GitHub Path
#      run: echo "$GITHUB_ACTION_PATH" >> $GITHUB_PATH
#      shell: bash
#      env:
#        GITHUB_ACTION_PATH: ${{ github.action_path }}
